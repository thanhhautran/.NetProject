#pragma checksum "D:\Temp\NetProject\WebShop\Areas\Admin\Views\Icon\Badges.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c6153fdcd3d9f54a76975b991c37301ae5a34c2f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Admin_Views_Icon_Badges), @"mvc.1.0.view", @"/Areas/Admin/Views/Icon/Badges.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c6153fdcd3d9f54a76975b991c37301ae5a34c2f", @"/Areas/Admin/Views/Icon/Badges.cshtml")]
    public class Areas_Admin_Views_Icon_Badges : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "D:\Temp\NetProject\WebShop\Areas\Admin\Views\Icon\Badges.cshtml"
  
    ViewData["Title"] = "Button";
    Layout = "~/Areas/Admin/Views/Shared/_MasterLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<iv class=""main-content"">
    <div class=""section__content section__content--p30"">
        <div class=""container-fluid"">
            <div class=""row"">
                <div class=""col-lg-6"">

                    <div class=""card"">
                        <div class=""card-header"">
                            <strong>Badges</strong>
                            <small>
                                Use
                                <code>.badge</code> class within
                                <code>&lt;span&gt;</code> elements to create badges:
                            </small>
                        </div>
                        <div class=""card-body"">

                            <a href=""#"">
                                News
                                <span class=""badge badge-primary"">5</span>
                            </a>
                            <br>
                            <a href=""#"">
                                Comments
                          ");
            WriteLiteral(@"      <span class=""badge badge-warning"">10</span>
                            </a>
                            <br>
                            <a href=""#"">
                                Updates
                                <span class=""badge badge-success"">2</span>
                            </a>
                        </div>
                    </div>
                    <!-- /# card -->


                    <div class=""card"">
                        <div class=""card-header"">
                            <strong>Labels</strong>
                        </div>
                        <div class=""card-body"">
                            <p class=""text-muted m-b-15"">
                                Use the
                                <code>.label</code> class,&nbsp; followed by one of the six contextual classes
                                <code>.label-default</code>,
                                <code>.label-primary</code>,
                                <code>.label-succ");
            WriteLiteral(@"ess</code>,
                                <code>.label-info</code>,
                                <code>.label-warning</code> or
                                <code>.label-danger</code>, within a
                                <code>&lt;span&gt;</code> element to create a label:
                            </p>

                            <h1>
                                Example heading
                                <span class=""badge badge-secondary"">New</span>
                            </h1>
                            <h2>
                                Example heading
                                <span class=""badge badge-secondary"">New</span>
                            </h2>
                            <h3>
                                Example heading
                                <span class=""badge badge-secondary"">New</span>
                            </h3>
                            <h4>
                                Example heading
                   ");
            WriteLiteral(@"             <span class=""badge badge-secondary"">New</span>
                            </h4>
                            <h5>
                                Example heading
                                <span class=""badge badge-secondary"">New</span>
                            </h5>
                            <h6>
                                Example heading
                                <span class=""badge badge-secondary"">New</span>
                            </h6>
                        </div>
                    </div>

                </div>
                <div class=""col-lg-6"">
                    <div class=""card"">
                        <div class=""card-header"">
                            <strong>Badges in Buttons</strong>
                        </div>
                        <div class=""card-body"">
                            <p class=""text-muted m-b-15"">
                                Use the
                                <code>.badge</code> class within
    ");
            WriteLiteral(@"                            <code>&lt;span&gt;</code> elements to create badges:
                            </p>

                            <button type=""button"" class=""btn btn-primary m-l-10 m-b-10"">
                                Primary
                                <span class=""badge badge-light"">7</span>
                            </button>
                            <button type=""button"" class=""btn btn-success m-l-10 m-b-10"">
                                Success
                                <span class=""badge badge-light"">7</span>
                            </button>
                            <button type=""button"" class=""btn btn-info m-l-10 m-b-10"">
                                Info
                                <span class=""badge badge-light"">7</span>
                            </button>
                            <button type=""button"" class=""btn btn-warning m-l-10 m-b-10"">
                                Warning
                                <span class=""badg");
            WriteLiteral(@"e badge-light"">7</span>
                            </button>
                            <button type=""button"" class=""btn btn-danger m-l-10 m-b-10"">
                                Danger
                                <span class=""badge badge-light"">7</span>
                            </button>
                        </div>
                    </div>

                    <div class=""card"">
                        <div class=""card-header"">
                            <strong>Labels</strong>
                        </div>
                        <div class=""card-body"">
                            <p class=""text-muted m-b-15"">
                                Use the
                                <code>.label</code> class,&nbsp; followed by one of the six contextual classes
                                <code>.label-default</code>,
                                <code>.label-primary</code>,
                                <code>.label-success</code>,
                                <");
            WriteLiteral(@"code>.label-info</code>,
                                <code>.label-warning</code> or
                                <code>.label-danger</code>, within a
                                <code>&lt;span&gt;</code> element to create a label:
                            </p>

                            <span class=""badge badge-primary"">Primary</span>
                            <span class=""badge badge-secondary"">Secondary</span>
                            <span class=""badge badge-success"">Success</span>
                            <span class=""badge badge-danger"">Danger</span>
                            <span class=""badge badge-warning"">Warning</span>
                            <span class=""badge badge-info"">Info</span>
                            <span class=""badge badge-light"">Light</span>
                            <span class=""badge badge-dark"">Dark</span>


                        </div>
                    </div>

                </div>
            </div>
        </div>
    </");
            WriteLiteral("div>\r\n    </div>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
